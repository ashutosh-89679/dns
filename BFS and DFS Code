graph = {
  '1' : ['2', '3'],
  '2' : ['4', '5'],
  '3' : ['6'],
  '4' : [],
  '5' : ['7', '8'],
  '6' : [],
  '7' : ['9','10'],
  '8' : [],
  '9' : [],
  '10': []
}

import networkx as nx
import matplotlib.pyplot as plt

G = nx.Graph()
G.add_edge(1, 2)
G.add_edge(1, 3)
G.add_edge(2, 4)
G.add_edge(2, 5)
G.add_edge(3, 6)
G.add_edge(5, 7)
G.add_edge(5, 8)
G.add_edge(7, 9)
G.add_edge(7, 10)

# explicitly set positions
pos = {1: (0, 0), 2: (-1, -0.1), 3: (1, -0.1), 4: (-2, -0.2), 5: (0, -0.2), 6:(2, -0.2), 7:(-1,-0.3), 8:(1,-0.3), 9:(-2,-0.4), 10:(0,-0.4)}

visited = [] # List for visited nodes.
queue = []     #Initialize a queue

def bfs(visited, graph, node): #function for BFS
  visited.append(node)
  queue.append(node)

  while queue:          # Creating loop to visit each node
    m = queue.pop(0) 
    print (m, end = " ") 

    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '1')    # function calling
nx.draw_networkx(G, pos)




-------------------------------------------------------------------------------------------------------------------
# Using a Python dictionary to act as an adjacency list
graph = {
  '1' : ['2', '3'],
  '2' : ['4', '5'],
  '3' : ['6'],
  '4' : [],
  '5' : ['7', '8'],
  '6' : [],
  '7' : ['9','10'],
  '8' : [],
  '9' : [],
  '10': []
}
import networkx as nx
import matplotlib.pyplot as plt

G = nx.Graph()
G.add_edge(1, 2)
G.add_edge(1, 3)
G.add_edge(2, 4)
G.add_edge(2, 5)
G.add_edge(3, 6)
G.add_edge(5, 7)
G.add_edge(5, 8)
G.add_edge(7, 9)
G.add_edge(7, 10)

# explicitly set positions
pos = {1: (0, 0), 2: (-1, -0.1), 3: (1, -0.1), 4: (-2, -0.2), 5: (0, -0.2), 6:(2, -0.2), 7:(-1,-0.3), 8:(1,-0.3), 9:(-2,-0.4), 10:(0,-0.4)}

visited = set() # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node):  #function for dfs 
    if node not in visited:
        print (node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, '1')
nx.draw_networkx(G, pos)
